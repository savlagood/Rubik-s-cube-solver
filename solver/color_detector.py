import numpy as np

def relu(tensor:np.array) -> np.array:
	return tensor * (tensor > 0)

def model(rgb:tuple, position:str):
	"""Convert percent rgb to color."""
	weights = [
		np.array([[-0.375715434551239, 0.006222172174602747, -0.37624290585517883, 0.008464309386909008, -0.29306915402412415, -0.278480589389801], [-0.2583787739276886, 0.014640724286437035, -0.2052038013935089, -0.4088667929172516, 0.027834463864564896, 0.1535203456878662], [-0.37659141421318054, 0.27898234128952026, 0.0708007887005806, -0.2236413210630417, -0.018338939175009727, 0.007888968102633953], [-0.22737780213356018, -0.31164607405662537, 0.060919418931007385, 0.06084316968917847, -0.2594054341316223, 0.3438246548175812], [-0.12750908732414246, -0.042990345507860184, -0.07803457975387573, -0.07182501256465912, 0.1670568585395813, 0.027315914630889893], [0.3599034547805786, 0.2760156989097595, -0.20095573365688324, -0.19916245341300964, -0.23079439997673035, 0.04949335753917694], [-0.09481274336576462, 0.12964841723442078, 0.23326009511947632, -0.34055399894714355, -0.021021608263254166, 0.14837206900119781], [0.02507052570581436, -0.1645250916481018, -0.09006770700216293, -0.14175689220428467, 0.38914966583251953, -0.08506185561418533], [-0.030394311994314194, -0.379715234041214, -0.19114382565021515, -0.08767685294151306, 0.3495703935623169, -0.21081328392028809], [0.35940438508987427, -0.017793387174606323, 0.03135669231414795, -0.35251787304878235, 0.294988214969635, -0.30571654438972473], [-0.3107262849807739, 0.1253812164068222, -0.12625961005687714, 0.19252081215381622, -0.11099227517843246, -0.232396200299263], [-0.09322390705347061, -0.22552275657653809, 0.13292385637760162, -0.3661069869995117, 0.3589838147163391, -0.37052398920059204], [-0.22353707253932953, 0.10790897905826569, -0.1295199990272522, 0.07100290060043335, -0.3484485447406769, -0.1994607299566269], [-0.2289896160364151, 0.011678849346935749, 0.24612711369991302, 0.2393476963043213, -0.5923634767532349, 0.15103957056999207], [0.36812829971313477, 0.08213147521018982, -0.3729535639286041, 0.17482183873653412, -0.15268348157405853, 0.08832335472106934], [0.010850013233721256, 0.060191381722688675, -0.4051192104816437, -0.20781154930591583, -0.25922784209251404, 0.08039125055074692], [0.16625730693340302, 0.3192038834095001, -0.3098008334636688, -0.33771243691444397, -0.12987564504146576, 0.16806797683238983], [0.15402713418006897, -0.18018299341201782, 0.0857740193605423, 0.1285267174243927, -0.09879052639007568, 0.014413595199584961], [0.22354990243911743, -0.22824575006961823, -0.016748519614338875, 0.2512343227863312, 0.27330633997917175, -0.2915950119495392], [-0.3748367130756378, -0.10353126376867294, -0.2833457589149475, -0.002823593793436885, 0.20766593515872955, -0.27643534541130066], [0.06434673815965652, -0.379851758480072, -0.3959147036075592, -0.15165047347545624, -0.08733777701854706, 0.26621806621551514], [0.20528529584407806, 0.12517832219600677, 0.06055162101984024, -0.051373451948165894, 0.1672583818435669, -0.07233186811208725], [-0.27462509274482727, -0.2608323395252228, 0.07626107335090637, 0.008311299607157707, 0.0026199386920779943, -0.07215800881385803], [0.03709816932678223, 0.097209133207798, -0.0648912563920021, -0.020724771544337273, 0.28011807799339294, -0.1131499707698822], [0.34130123257637024, -0.30257803201675415, -0.21281534433364868, -0.15826867520809174, 0.4067056179046631, -0.23141881823539734], [-0.003435013582929969, 0.20048224925994873, 0.1682756543159485, -0.34064507484436035, -0.08935210853815079, -0.12836191058158875], [-0.09616860002279282, 0.3011847734451294, 0.1506011188030243, -0.07918503880500793, -0.27879202365875244, 0.06937824934720993], [-0.11415240168571472, -0.3154951333999634, -0.1161503866314888, -0.029848605394363403, 0.023899346590042114, 0.2896634042263031], [0.05425069481134415, 0.19982469081878662, 0.3320458233356476, 0.2106599062681198, -0.5106386542320251, -0.02067284844815731], [-0.009468594565987587, -0.13552325963974, 0.12212444096803665, 0.21472065150737762, -0.10570745170116425, 0.18325790762901306], [0.09993119537830353, -0.18024396896362305, 0.09192165732383728, -0.04066626355051994, 0.14225952327251434, 0.02358376421034336], [-0.10364798456430435, 0.13902810215950012, 0.3502753973007202, 0.09703265130519867, 0.09209495782852173, -0.28133949637413025]]),
		np.array([-0.35013189911842346, -0.07662559300661087, -0.2327706664800644, 0.1426277756690979, -0.26829949021339417, -0.2749239206314087, 0.008289753459393978, -0.005134612787514925, -0.13348735868930817, 0.13077761232852936, -0.3399444818496704, -0.1822856068611145, 0.13728028535842896, -0.06740762293338776, -0.37524235248565674, -0.35254666209220886, -0.30924558639526367, -0.40658044815063477, 0.08855806291103363, -0.3710115849971771, 0.04799285903573036, 0.1415630728006363, -0.3119862973690033, -0.2686323821544647, 0.40054965019226074, -0.3456103801727295, 0.2954481542110443, -0.2746080458164215, 0.49937903881073, -0.2764087915420532, -0.3522328734397888, -0.33341240882873535]),
		np.array([[-0.1277223825454712, 0.038480304181575775, -0.09511411935091019, -0.04501725360751152, -0.10838019102811813, -0.03907988592982292, -0.028251003473997116, -0.07987416535615921, -0.08902031183242798, 0.11550714820623398, -0.05225953087210655, -0.1055372953414917, -0.017984671518206596, -0.10148447006940842, 0.011215844191610813, -0.13509881496429443, -0.04222998023033142, 0.059486351907253265, -0.07268806546926498, 0.054491426795721054, -0.11638081818819046, 0.027601050212979317, 0.043549053370952606, 0.08494274318218231, 0.10856407135725021, -0.025245245546102524, 0.15317626297473907, 0.16332943737506866, 0.11494680494070053, 0.008696518838405609, 0.011656967923045158, 0.13762147724628448], [-0.011051788926124573, 0.10769259929656982, -0.10396938025951385, -0.001124453847296536, -0.10208737850189209, 0.06148356944322586, -0.10203485190868378, 0.04208879917860031, 0.03779646381735802, -0.10110235959291458, -0.06994976103305817, -0.007830646820366383, 0.00814806018024683, -0.032135698944330215, 0.02347487583756447, 0.14413990080356598, -0.05777342990040779, -0.0028052774723619223, -0.04153238609433174, 0.051893528550863266, 0.035465896129608154, -0.03389936313033104, -0.13267754018306732, -0.014378066174685955, 0.07336251437664032, 0.10371329635381699, -0.08981803059577942, -0.04036366567015648, 0.033303167670965195, 0.07781950384378433, -0.008381600491702557, 0.014750420115888119], [-0.16092562675476074, 0.06608253717422485, -0.02308802306652069, 0.06328058987855911, 0.16295291483402252, -0.06544636189937592, -0.12403378635644913, -0.049123093485832214, -0.26523837447166443, -0.09420067816972733, -0.02140757627785206, 0.06914673000574112, 0.10426080971956253, 0.30438050627708435, -0.06974902004003525, 0.02235846035182476, -0.002063348889350891, -0.10268498957157135, 0.07002653181552887, -0.13177305459976196, 0.018611615523695946, 0.2114093005657196, 0.0861697569489479, -0.044849615544080734, 0.1547384113073349, 0.17469266057014465, -0.11307299882173538, -0.08097246289253235, 0.4340546131134033, 0.012066660448908806, -0.05965685099363327, 0.015725860372185707], [-0.109695665538311, 0.004842747002840042, 0.15755459666252136, -0.1208781749010086, -0.0951317772269249, -0.0806490033864975, -0.013799147680401802, 0.09152249246835709, 0.02528965100646019, 0.0870790034532547, 0.15406647324562073, 0.02285461314022541, -0.01755460537970066, -0.20822809636592865, -0.09508014470338821, 0.15762358903884888, -0.050648439675569534, 0.17532439529895782, 0.08595092594623566, 0.11316174268722534, 0.07247680425643921, -0.017120109871029854, 0.0770685225725174, -0.08652453124523163, -0.1406962275505066, -0.1489506959915161, -0.06713920831680298, 0.1328742355108261, -0.20334000885486603, -0.04573554918169975, -0.05829198285937309, -0.06683619320392609], [0.1602477729320526, 0.09294966608285904, 0.1323126256465912, 0.05184043571352959, 0.04736645892262459, -0.002634494099766016, -0.15715517103672028, -0.04914256930351257, 0.06961449980735779, 0.02863796055316925, 0.0071042850613594055, 0.12422611564397812, 0.12307202070951462, 0.001675190171226859, -0.03220616653561592, 0.17087209224700928, -0.04493798688054085, 0.10572489351034164, 0.022567179054021835, -0.02784053422510624, -0.017484445124864578, -0.12334640324115753, -0.04965520277619362, 0.08869720995426178, -0.014529142528772354, -0.1046973243355751, 0.1258557140827179, 0.07328572124242783, -0.04109830781817436, -0.09627965092658997, -0.10834648460149765, -0.014836686663329601], [0.16885565221309662, 0.16862083971500397, 0.144147127866745, 0.10002544522285461, 0.030950594693422318, -0.13965058326721191, -0.014408177696168423, 0.02755114994943142, 0.06932272762060165, 0.07018279284238815, 0.10723481327295303, -0.062175203114748, 0.042500268667936325, -0.14842046797275543, -0.028404489159584045, -0.08654846996068954, -0.06710441410541534, -0.10958336293697357, -0.010443863458931446, -0.1252545416355133, 0.008245271630585194, -0.0694112703204155, -0.07176678627729416, -0.04256371408700943, 0.08422030508518219, -0.15917079150676727, -0.025356872007250786, -0.09687673300504684, 0.027529284358024597, 0.08607015758752823, -0.0750555545091629, 0.0026272465474903584]]),
		np.array([0.04490027576684952, 0.04691123217344284, 0.1847277134656906, -0.23162177205085754, 0.10889579355716705, -0.1154339537024498]),
	]

	ctype = (0, 0, 0)
	if position == "central": # central
		ctype = (1, 0, 0)
	elif position == "cross": # cross
		ctype = (0, 1, 0)
	elif position == "corner": # corner
		ctype = (0, 0, 1)
	else:
		raise ValueError(f"position argument must be 'central', 'cross' or 'corner' but not '{position}'")

	data = np.array([ctype + rgb], dtype=np.float16)
	for i in range(0, len(weights)-2, 2):
		weight, bias = weights[i:i+2]
		data = relu(data.dot(weight.T) + bias)

	data = data.dot(weights[-2].T) + weights[-1]
	idx_to_color = {0: 'w', 1: 'y', 2: 'r', 3: 'o', 4: 'g', 5: 'b'}
	return idx_to_color[data.argmax()]

def rgb_to_color_name(raw_inp:list):
	result = []
	for side in range(6):
		res_side = []
		for row in range(3):
			res_row = []
			for col in range(3):
				if (row == 0 or row == 2) and (col == 0 or col == 2):
					ctype = 'corner'
				elif row == col == 1:
					ctype = 'central'
				else:
					ctype = 'cross'

				res_row.append(model(tuple(raw_inp[side][row][col]), ctype))

			res_side.append(res_row)

		result.append(res_side)

	return result

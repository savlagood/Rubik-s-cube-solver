from datatypes import RubiksCube

class Robot:
	def __init__(self):
		pass

	def scan_cube(self):
		# sides_map = [
		# 	[["y", "y", "g"],
		# 	 ["r", "w", "b"],
		# 	 ["b", "g", "b"]],

		# 	[["o", "w", "o"],
		# 	 ["r", "r", "g"],
		# 	 ["r", "y", "b"]],

		# 	[["w", "r", "w"],
		# 	 ["r", "b", "b"],
		# 	 ["r", "y", "g"]],

		# 	[["o", "g", "b"],
		# 	 ["w", "o", "o"],
		# 	 ["w", "g", "g"]],

		# 	[["r", "w", "y"],
		# 	 ["b", "g", "y"],
		# 	 ["y", "w", "g"]],

		# 	[["o", "o", "y"],
		# 	 ["o", "y", "o"],
		# 	 ["r", "b", "w"]],
		# ]
		# sides_map = [
		# 	[["y", "y", "g"],
		# 	 ["r", "w", "b"],
		# 	 ["b", "g", "b"]],

		# 	[["o", "w", "o"],
		# 	 ["r", "r", "g"],
		# 	 ["r", "y", "b"]],

		# 	[["w", "r", "w"],
		# 	 ["r", "b", "w"],
		# 	 ["r", "y", "g"]],

		# 	[["o", "o", "b"],
		# 	 ["o", "o", "o"],
		# 	 ["w", "w", "g"]],

		# 	[["r", "w", "y"],
		# 	 ["b", "g", "y"],
		# 	 ["y", "w", "g"]],

		# 	[["o", "o", "y"],
		# 	 ["o", "y", "o"],
		# 	 ["r", "b", "w"]],
		# ]
		# sides_map = [
		# 	[["y", "o", "o"],
		# 	["o", "o", "o"],
		# 	["r", "o", "w"]],

		# 	[["g", "w", "o"],
		# 	["y", "w", "g"],
		# 	["w", "b", "g"]],

		# 	[["g", "b", "b"],
		# 	["r", "b", "r"],
		# 	["y", "y", "b"]],

		# 	[["y", "y", "r"],
		# 	["w", "y", "g"],
		# 	["y", "b", "b"]],

		# 	[["g", "g", "w"],
		# 	["w", "g", "r"],
		# 	["r", "y", "b"]],

		# 	[["w", "b", "o"],
		# 	["r", "r", "w"],
		# 	["r", "g", "o"]]
		# ]
		# sides_map = [
		# 	[["o", "o", "o"],
		# 	["o", "o", "o"],
		# 	["o", "o", "o"]],

		# 	[["w", "w", "w"],
		# 	["w", "w", "g"],
		# 	["r", "y", "y"]],

		# 	[["b", "b", "b"],
		# 	["r", "b", "r"],
		# 	["r", "y", "w"]],

		# 	[["y", "y", "y"],
		# 	["w", "y", "g"],
		# 	["b", "b", "g"]],

		# 	[["g", "g", "g"],
		# 	["w", "g", "b"],
		# 	["r", "r", "w"]],

		# 	[["y", "y", "g"],
		# 	["r", "r", "g"],
		# 	["r", "b", "b"]]
		# ]
		# sides_map = [
		# 	[["o", "o", "o"],
		# 	["o", "o", "o"],
		# 	["o", "o", "o"]],

		# 	[["w", "w", "w"],
		# 	["w", "w", "w"],
		# 	["g", "r", "b"]],

		# 	[["b", "b", "b"],
		# 	["b", "b", "b"],
		# 	["r", "r", "g"]],

		# 	[["y", "y", "y"],
		# 	["y", "y", "y"],
		# 	["r", "r", "r"]],

		# 	[["g", "g", "g"],
		# 	["g", "g", "g"],
		# 	["b", "r", "r"]],

		# 	[["y", "y", "w"],
		# 	["g", "r", "w"],
		# 	["y", "b", "w"]]
		# ]
		# sides_map = [
		# 	[["o", "o", "o"],
		# 	["o", "o", "o"],
		# 	["o", "o", "o"]],

		# 	[["w", "w", "w"],
		# 	["w", "w", "w"],
		# 	["b", "y", "r"]],

		# 	[["b", "b", "b"],
		# 	["b", "b", "b"],
		# 	["g", "g", "r"]],

		# 	[["y", "y", "y"],
		# 	["y", "y", "y"],
		# 	["b", "b", "r"]],

		# 	[["g", "g", "g"],
		# 	["g", "g", "g"],
		# 	["y", "w", "w"]],

		# 	[["g", "r", "r"],
		# 	["r", "r", "r"],
		# 	["y", "r", "w"]]
		# ]
		# sides_map = [
		# 	[["o", "o", "o"],
		# 	["o", "o", "o"],
		# 	["o", "o", "o"]],

		# 	[["w", "w", "w"],
		# 	["w", "w", "w"],
		# 	["y", "w", "r"]],

		# 	[["b", "b", "b"],
		# 	["b", "b", "b"],
		# 	["w", "b", "w"]],

		# 	[["y", "y", "y"],
		# 	["y", "y", "y"],
		# 	["r", "y", "y"]],

		# 	[["g", "g", "g"],
		# 	["g", "g", "g"],
		# 	["r", "g", "r"]],

		# 	[["b", "r", "g"],
		# 	["r", "r", "r"],
		# 	["g", "r", "b"]]
		# ]

		# sides_map = [
		# 	[["o", "o", "o"],
		# 	["o", "o", "o"],
		# 	["o", "o", "o"]],

		# 	[["w", "w", "w"],
		# 	["w", "w", "w"],
		# 	["w", "w", "r"]],

		# 	[["b", "b", "b"],
		# 	["b", "b", "b"],
		# 	["w", "b", "b"]],

		# 	[["y", "y", "y"],
		# 	["y", "y", "y"],
		# 	["y", "y", "g"]],

		# 	[["g", "g", "g"],
		# 	["g", "g", "g"],
		# 	["r", "g", "g"]],

		# 	[["y", "r", "r"],
		# 	["r", "r", "r"],
		# 	["r", "r", "b"]]
		# ]

		sides_map = [[['r', 'o', 'r'], ['o', 'r', 'o'], ['r', 'o', 'r']], [['b', 'g', 'b'], ['g', 'b', 'g'], ['b', 'g', 'b']], [['w', 'y', 'w'], ['y', 'w', 'w'], ['w', 'w', 'w']], [['g', 'b', 'g'], ['b', 'g', 'b'], ['g', 'b', 'g']], [['y', 'y', 'y'], ['w', 'y', 'w'], ['y', 'w', 'y']], [['o', 'r', 'o'], ['r', 'o', 'r'], ['o', 'r', 'o']]]

		return RubiksCube(sides_map=sides_map)

	def rotate_side(self, side_idx:int, n:int, byclockwise:bool=True):
		pass

	def rotate_cube(self, n:int, byside:str):
		pass
